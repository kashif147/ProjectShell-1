import React, { useState, useEffect, useRef } from "react";
import {
  Card,
  Button,
  Space,
  Typography,
  Spin,
  message,
  Drawer,
  Row,
  Col,
  Divider,
  Tooltip,
  Badge,
} from "antd";
import {
  FilePdfOutlined,
  FileExcelOutlined,
  PrinterOutlined,
  DownloadOutlined,
  FullscreenOutlined,
  FullscreenExitOutlined,
  ReloadOutlined,
  SettingOutlined,
  EyeOutlined,
} from "@ant-design/icons";
import * as XLSX from "xlsx";
import jsPDF from "jspdf";
import "jspdf-autotable";
import moment from "moment";

const { Title, Text } = Typography;

const ReportViewer = ({
  title = "Report Viewer",
  subtitle = "Interactive Report Display",
  data = [],
  columns = [],
  loading = false,
  onRefresh,
  onExportPDF,
  onExportExcel,
  onPrint,
  showFullscreen = true,
  showExport = true,
  showPrint = true,
  showRefresh = true,
  customActions = [],
  reportType = "table",
  className = "",
  style = {},
  children,
}) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const tableRef = useRef(null);

  // Default export functions if not provided
  const handleExportPDF = async () => {
    if (onExportPDF) {
      await onExportPDF();
      return;
    }

    try {
      const doc = new jsPDF();
      const table = tableRef.current?.querySelector(".ant-table");

      if (table) {
        doc.autoTable({
          html: table,
          startY: 20,
          styles: {
            fontSize: 8,
            cellPadding: 2,
          },
          headStyles: {
            fillColor: [33, 94, 151],
            textColor: 255,
            fontStyle: "bold",
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245],
          },
        });
      } else {
        doc.text(title, 20, 20);
        doc.text(
          `Generated on: ${moment().format("YYYY-MM-DD HH:mm:ss")}`,
          20,
          30
        );
        doc.text("No data available for export", 20, 40);
      }

      doc.save(
        `${title.replace(/\s+/g, "_")}_${moment().format("YYYY-MM-DD")}.pdf`
      );
      message.success("PDF exported successfully");
    } catch (error) {
      console.error("PDF export error:", error);
      message.error("Failed to export PDF");
    }
  };

  const handleExportExcel = async () => {
    if (onExportExcel) {
      await onExportExcel();
      return;
    }

    try {
      if (!data || data.length === 0) {
        message.warning("No data available for export");
        return;
      }

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Report Data");

      XLSX.writeFile(
        workbook,
        `${title.replace(/\s+/g, "_")}_${moment().format("YYYY-MM-DD")}.xlsx`
      );
      message.success("Excel file exported successfully");
    } catch (error) {
      console.error("Excel export error:", error);
      message.error("Failed to export Excel file");
    }
  };

  const handlePrint = async () => {
    if (onPrint) {
      await onPrint();
      return;
    }

    try {
      const printWindow = window.open("", "_blank");
      const table = tableRef.current?.querySelector(".ant-table");

      if (table) {
        printWindow.document.write(`
          <html>
            <head>
              <title>${title}</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; font-weight: bold; }
                .print-header { margin-bottom: 20px; }
                .print-footer { margin-top: 20px; font-size: 12px; color: #666; }
              </style>
            </head>
            <body>
              <div class="print-header">
                <h1>${title}</h1>
                <p>${subtitle}</p>
                <p>Generated on: ${moment().format("YYYY-MM-DD HH:mm:ss")}</p>
              </div>
              ${table.outerHTML}
              <div class="print-footer">
                <p>Report generated by Membership Management System</p>
              </div>
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
      } else {
        message.warning("No data available for printing");
      }
    } catch (error) {
      console.error("Print error:", error);
      message.error("Failed to print report");
    }
  };

  const handleRefresh = async () => {
    if (onRefresh) {
      await onRefresh();
    } else {
      message.info("Refresh functionality not implemented");
    }
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };

  const toggleDrawer = () => {
    setIsDrawerOpen(!isDrawerOpen);
  };

  const renderActions = () => (
    <Space>
      {showRefresh && (
        <Tooltip title="Refresh Data">
          <Button
            icon={<ReloadOutlined />}
            onClick={handleRefresh}
            loading={loading}
            size="small"
          >
            Refresh
          </Button>
        </Tooltip>
      )}

      {showExport && (
        <>
          <Tooltip title="Export to PDF">
            <Button
              icon={<FilePdfOutlined />}
              onClick={handleExportPDF}
              size="small"
              type="primary"
            >
              PDF
            </Button>
          </Tooltip>

          <Tooltip title="Export to Excel">
            <Button
              icon={<FileExcelOutlined />}
              onClick={handleExportExcel}
              size="small"
            >
              Excel
            </Button>
          </Tooltip>
        </>
      )}

      {showPrint && (
        <Tooltip title="Print Report">
          <Button icon={<PrinterOutlined />} onClick={handlePrint} size="small">
            Print
          </Button>
        </Tooltip>
      )}

      {showFullscreen && (
        <Tooltip title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}>
          <Button
            icon={
              isFullscreen ? <FullscreenExitOutlined /> : <FullscreenOutlined />
            }
            onClick={toggleFullscreen}
            size="small"
          >
            {isFullscreen ? "Exit" : "Fullscreen"}
          </Button>
        </Tooltip>
      )}

      <Tooltip title="Report Settings">
        <Button icon={<SettingOutlined />} onClick={toggleDrawer} size="small">
          Settings
        </Button>
      </Tooltip>

      {customActions.map((action, index) => (
        <Button
          key={index}
          icon={action.icon}
          onClick={action.onClick}
          size="small"
          type={action.type || "default"}
        >
          {action.label}
        </Button>
      ))}
    </Space>
  );

  const reportContent = (
    <div className={`report-viewer ${className}`} style={style}>
      {/* Report Header */}
      <Card className="report-header-card" style={{ marginBottom: 16 }}>
        <Row justify="space-between" align="middle">
          <Col>
            <div>
              <Title level={2} style={{ margin: 0, color: "#1976d2" }}>
                {title}
              </Title>
              <Text type="secondary" style={{ fontSize: 16 }}>
                {subtitle}
              </Text>
            </div>
          </Col>
          <Col>{renderActions()}</Col>
        </Row>

        <Divider style={{ margin: "16px 0" }} />

        {/* Report Stats */}
        <Row gutter={16}>
          <Col span={6}>
            <div style={{ textAlign: "center" }}>
              <Badge count={data?.length || 0} showZero color="#1976d2" />
              <div style={{ fontSize: 12, color: "#666", marginTop: 4 }}>
                Total Records
              </div>
            </div>
          </Col>
          <Col span={6}>
            <div style={{ textAlign: "center" }}>
              <Text strong style={{ color: "#52c41a" }}>
                {moment().format("DD/MM/YYYY")}
              </Text>
              <div style={{ fontSize: 12, color: "#666", marginTop: 4 }}>
                Generated Date
              </div>
            </div>
          </Col>
          <Col span={6}>
            <div style={{ textAlign: "center" }}>
              <Text strong style={{ color: "#1890ff" }}>
                {moment().format("HH:mm")}
              </Text>
              <div style={{ fontSize: 12, color: "#666", marginTop: 4 }}>
                Generated Time
              </div>
            </div>
          </Col>
          <Col span={6}>
            <div style={{ textAlign: "center" }}>
              <Text strong style={{ color: "#722ed1" }}>
                {reportType.toUpperCase()}
              </Text>
              <div style={{ fontSize: 12, color: "#666", marginTop: 4 }}>
                Report Type
              </div>
            </div>
          </Col>
        </Row>
      </Card>

      {/* Report Content */}
      <Card className="report-content-card">
        <Spin spinning={loading}>
          <div ref={tableRef}>
            {children || (
              <div
                style={{
                  padding: 40,
                  textAlign: "center",
                  color: "#999",
                  fontSize: 16,
                }}
              >
                <EyeOutlined style={{ fontSize: 48, marginBottom: 16 }} />
                <div>No report content available</div>
                <div style={{ fontSize: 14, marginTop: 8 }}>
                  Please provide report data or custom content
                </div>
              </div>
            )}
          </div>
        </Spin>
      </Card>
    </div>
  );

  return (
    <>
      {isFullscreen ? (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 1000,
            background: "#fff",
            overflow: "auto",
          }}
        >
          {reportContent}
        </div>
      ) : (
        reportContent
      )}

      {/* Settings Drawer */}
      <Drawer
        title="Report Settings"
        placement="right"
        onClose={toggleDrawer}
        open={isDrawerOpen}
        width={400}
      >
        <div style={{ padding: 16 }}>
          <Title level={4}>Export Options</Title>
          <Space direction="vertical" style={{ width: "100%" }}>
            <Button block icon={<FilePdfOutlined />} onClick={handleExportPDF}>
              Export as PDF
            </Button>
            <Button
              block
              icon={<FileExcelOutlined />}
              onClick={handleExportExcel}
            >
              Export as Excel
            </Button>
            <Button block icon={<PrinterOutlined />} onClick={handlePrint}>
              Print Report
            </Button>
          </Space>

          <Divider />

          <Title level={4}>Display Options</Title>
          <Space direction="vertical" style={{ width: "100%" }}>
            <Button
              block
              icon={<FullscreenOutlined />}
              onClick={toggleFullscreen}
            >
              {isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
            </Button>
            <Button
              block
              icon={<ReloadOutlined />}
              onClick={handleRefresh}
              loading={loading}
            >
              Refresh Data
            </Button>
          </Space>

          <Divider />

          <Title level={4}>Report Information</Title>
          <div style={{ fontSize: 14, color: "#666" }}>
            <div>
              <strong>Title:</strong> {title}
            </div>
            <div>
              <strong>Type:</strong> {reportType}
            </div>
            <div>
              <strong>Records:</strong> {data?.length || 0}
            </div>
            <div>
              <strong>Generated:</strong> {moment().format("DD/MM/YYYY HH:mm")}
            </div>
          </div>
        </div>
      </Drawer>
    </>
  );
};

export default ReportViewer;
